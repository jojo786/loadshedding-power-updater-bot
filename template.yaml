AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "PowerUpdater: Eskom Loadshedding Telegram Bot"

Parameters:
  FQDN:
    Type: String
    Description: Fully qualified domain name for ACM and APIGW, to be used for the flask app, for example ip.eol.dev

Globals:
  Function:
    Timeout: 40
    MemorySize: 128
    Runtime: python3.13
    Tags:
      project: "PowerUpdater"
    Architectures:
      - arm64
    ReservedConcurrentExecutions: 1
    LoggingConfig:
      LogGroup: !Sub /aws/lambda/${AWS::StackName}
      LogFormat: JSON
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:012438385374:layer:LambdaInsightsExtension-Arm64:18" #Lambda Insights Layer - Specific for Cape Town
      - !Sub "arn:aws:lambda:${AWS::Region}:904233096616:layer:AWSOpenTelemetryDistroPython:5" #Application Signals Layer - Specific for Cape Town
    Tracing: Active
    Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          PowerUpdaterTableName: !Ref PowerUpdaterTable
          StackName: !Sub ${AWS::StackName}
    
Resources:
  PowerUpdaterGetStageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: get_stage_lambda.lambda_handler
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        #- CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
      Events:
        GetEskomStageEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(0 * * * ? *)
            ScheduleExpressionTimezone: GMT+2
  
  PowerUpdaterGetScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: get_schedule_lambda.lambda_handler
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
      Events:
        GetEskomScheduleEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(1 5,9,13,17,21 * * ? *)
            ScheduleExpressionTimezone: GMT+2
  
  PowerUpdaterNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: notification_lambda.lambda_handler
      Environment:
        Variables:
          PowerUpdaterGetScheduleFunction: !Ref PowerUpdaterGetScheduleFunction
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetScheduleFunction
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${AWS::StackName}/*"
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt PowerUpdaterTable.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["MODIFY"]}'
        NotificationEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(2 5,9,13,17,21 * * ? *)
            ScheduleExpressionTimezone: GMT+2
  
  PowerUpdaterTelegramHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: telegramhandler_lambda.lambda_handler
      Environment:
        Variables:
          TelegramScheduleCommandStateMachine: !GetAtt TelegramScheduleCommandStateMachine.Arn
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt TelegramScheduleCommandStateMachine.Name
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${AWS::StackName}/*"
      Events:
        TelegramWebHook:
          Type: Api
          Properties:
            Path: /
            Method: POST
  
  PowerUpdaterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: area
          AttributeType: S
      KeySchema:
        - AttributeName: area
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Value: "PowerUpdater"
          Key: "project"
  
  TelegramScheduleCommandStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        PowerUpdaterGetStageFunctionArn: !GetAtt PowerUpdaterGetStageFunction.Arn
        PowerUpdaterGetScheduleFunctionArn: !GetAtt PowerUpdaterGetScheduleFunction.Arn
        PowerUpdaterNotificationFunctionArn: !GetAtt PowerUpdaterNotificationFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetStageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetScheduleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterNotificationFunction
      DefinitionUri: statemachine/telegram_command_schedule.asl.json
      Tags:
        Value: "PowerUpdater"
        Key: "project"

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: flask/
      Handler: run.sh #required for the Lambda Web Adapter
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref FlaskHttpApiGateway 
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          PORT: 8000
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerArm64:17
    Connectors:
      PowerUpdaterTableConnector:
        Properties:
          Destination: 
            Id: PowerUpdaterTable
          Permissions: 
            - Read
            - Write 

  # Create our SSL certificate
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref FQDN
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName:
          Fn::Sub: '*.${FQDN}'
        ValidationDomain:
          Fn::Sub: '*.${FQDN}'
      - DomainName:
          Ref: FQDN
        ValidationDomain:
          Ref: FQDN
      SubjectAlternativeNames:
      - Fn::Sub: '*.${FQDN}'
      - Ref: FQDN

  # Create endpoint for our domain
  FlaskHttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref FQDN
        CertificateArn: !Ref GenerateCertificate


Outputs:
  FlaskFunctionApi:
    Description: API Gateway endpoint URL for FlaskFunction
    Value: !Sub "https://${FlaskHttpApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"