AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "PowerUpdater: Eskom Loadshedding Telegram Bot"

Globals:
  Function:
    Timeout: 40
    MemorySize: 128
    Runtime: python3.12
    Tags:
      project: "PowerUpdater"
    Architectures:
      - arm64
    ReservedConcurrentExecutions: 1
    LoggingConfig:
      LogGroup: !Sub /aws/lambda/${AWS::StackName}
      LogFormat: JSON

Parameters:
  TelegramBotToken:
    Type: String
  TelegramChatID:
    Type: String

Resources:
  PowerUpdaterGetStageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: get_stage_lambda.lambda_handler
      Environment:
        Variables:
          PowerUpdaterTableName: !Ref PowerUpdaterTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
      Events:
        GetEskomStageEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(0 * * * ? *)
            ScheduleExpressionTimezone: GMT+2
  PowerUpdaterGetScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: get_schedule_lambda.lambda_handler
      Environment:
        Variables:
          PowerUpdaterTableName: !Ref PowerUpdaterTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
      Events:
        GetEskomScheduleEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(1 5,9,13,17,21 * * ? *)
            ScheduleExpressionTimezone: GMT+2
  PowerUpdaterNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: notification_lambda.lambda_handler
      Environment:
        Variables:
          PowerUpdaterTableName: !Ref PowerUpdaterTable
          PowerUpdaterGetScheduleFunction: !Ref PowerUpdaterGetScheduleFunction
          TelegramBotToken: !Ref TelegramBotToken
          TelegramChatID: !Ref TelegramChatID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetScheduleFunction
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt PowerUpdaterTable.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["MODIFY"]}'
        NotificationEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(2 5,9,13,17,21 * * ? *)
            ScheduleExpressionTimezone: GMT+2
  PowerUpdaterTelegramHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: telegramhandler_lambda.lambda_handler
      Environment:
        Variables:
          TelegramBotToken: !Ref TelegramBotToken
          TelegramChatID: !Ref TelegramChatID
          TelegramScheduleCommandStateMachine: !GetAtt TelegramScheduleCommandStateMachine.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt TelegramScheduleCommandStateMachine.Name
      Events:
        TelegramWebHook:
          Type: Api
          Properties:
            Path: /
            Method: POST
  PowerUpdaterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: area
          AttributeType: S
      KeySchema:
        - AttributeName: area
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Value: "PowerUpdater"
          Key: "project"
  TelegramScheduleCommandStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        PowerUpdaterGetStageFunctionArn: !GetAtt PowerUpdaterGetStageFunction.Arn
        PowerUpdaterGetScheduleFunctionArn: !GetAtt PowerUpdaterGetScheduleFunction.Arn
        PowerUpdaterNotificationFunctionArn: !GetAtt PowerUpdaterNotificationFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetStageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetScheduleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterNotificationFunction
      DefinitionUri: statemachine/telegram_command_schedule.asl.json
      Tags:
        Value: "PowerUpdater"
        Key: "project"

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: flask/
      Handler: run.sh #required for the Lambda Web Adapter
      Events:
        HelloWorld:
          Type: HttpApi
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          PORT: 8000
          PowerUpdaterTable: !Ref PowerUpdaterTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerArm64:17
    Connectors:
      PowerUpdaterTableConnector:
        Properties:
          Destination: 
            Id: PowerUpdaterTable
          Permissions: 
            - Read
            - Write 

Outputs:
  FlaskFunctionApi:
    Description: API Gateway endpoint URL for FlaskFunction
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"