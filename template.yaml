AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "PowerUpdater: Eskom Loadshedding Telegram Bot"

Parameters:
  FQDN:
    Type: String
    Description: Fully qualified domain name for ACM and APIGW, to be used for the flask app, for example ip.eol.dev

Globals:
  Function:
    Timeout: 40
    MemorySize: 128
    Runtime: python3.13
    Tags:
      project: "PowerUpdater"
    Architectures:
      - arm64
    ReservedConcurrentExecutions: 1
    LoggingConfig:
      LogGroup: !Sub /aws/lambda/${AWS::StackName}
      LogFormat: JSON
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:22" #Lambda Insights Layer - Specific for us-east-1
      - !Sub "arn:aws:lambda:${AWS::Region}:615299751070:layer:AWSOpenTelemetryDistroPython:12" #Application Signals Layer - Specific for us-east-1
    Tracing: Active
    Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          PowerUpdaterTableName: !Ref PowerUpdaterTable
          StackName: !Sub ${AWS::StackName}
    
Resources:
  PowerUpdaterGetStageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: get_stage_lambda.lambda_handler
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        #- CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${AWS::StackName}/*"
      Events:
        GetEskomStageEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(0 * * * ? *)
            ScheduleExpressionTimezone: GMT+2
  
  #Lambda Resource-based policy permission to allow the Agent to invoke GetStageFunction
  PowerUpdaterGetStageFunctionBedrock:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PowerUpdaterGetStageFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/${Agent}"

  PowerUpdaterGetScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: get_schedule_lambda.lambda_handler
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${AWS::StackName}/*"
      Events:
        GetEskomScheduleEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(1 5,9,13,17,21 * * ? *)
            ScheduleExpressionTimezone: GMT+2        
  
  #Lambda Resource-based policy permission to allow the Agent to invoke GetScheduleFunction
  PowerUpdaterGetScheduleFunctionBedrock:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PowerUpdaterGetScheduleFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/${Agent}"


  PowerUpdaterNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: notification_lambda.lambda_handler
      Environment:
        Variables:
          PowerUpdaterGetScheduleFunction: !Ref PowerUpdaterGetScheduleFunction
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetScheduleFunction
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${AWS::StackName}/*"
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt PowerUpdaterTable.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["MODIFY"]}'
        NotificationEvent:
          Type: ScheduleV2
          Properties:
            Description: run every hour
            ScheduleExpression: cron(2 5,9,13,17,21 * * ? *)
            ScheduleExpressionTimezone: GMT+2
  
  PowerUpdaterTelegramHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: power_updater/
      Handler: telegramhandler_lambda.lambda_handler
      Environment:
        Variables:
          TelegramScheduleCommandStateMachine: !GetAtt TelegramScheduleCommandStateMachine.Arn
          AgentId: !GetAtt Agent.AgentId
          AgentAliasId: !GetAtt AgentAlias.AgentAliasId      
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref PowerUpdaterTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt TelegramScheduleCommandStateMachine.Name
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${AWS::StackName}/*"
            - Effect: Allow
              Action:
                  - bedrock:*
              Resource: '*'
      Events:
        TelegramWebHook:
          Type: Api
          Properties:
            Path: /
            Method: POST
          
  
  PowerUpdaterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: area
          AttributeType: S
      KeySchema:
        - AttributeName: area
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Value: "PowerUpdater"
          Key: "project"
  
  TelegramScheduleCommandStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        PowerUpdaterGetStageFunctionArn: !GetAtt PowerUpdaterGetStageFunction.Arn
        PowerUpdaterGetScheduleFunctionArn: !GetAtt PowerUpdaterGetScheduleFunction.Arn
        PowerUpdaterNotificationFunctionArn: !GetAtt PowerUpdaterNotificationFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetStageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterGetScheduleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PowerUpdaterNotificationFunction
      DefinitionUri: statemachine/telegram_command_schedule.asl.json
      Tags:
        Value: "PowerUpdater"
        Key: "project"

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: flask/
      Handler: run.sh #required for the Lambda Web Adapter
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref FlaskHttpApiGateway 
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
       # - CloudWatchLambdaApplicationSignalsExecutionRolePolicy
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          PORT: 8000
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerArm64:17
    Connectors:
      PowerUpdaterTableConnector:
        Properties:
          Destination: 
            Id: PowerUpdaterTable
          Permissions: 
            - Read
            - Write 

  # Create our SSL certificate
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref FQDN
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName:
          Fn::Sub: '*.${FQDN}'
        ValidationDomain:
          Fn::Sub: '*.${FQDN}'
      - DomainName:
          Ref: FQDN
        ValidationDomain:
          Ref: FQDN
      SubjectAlternativeNames:
      - Fn::Sub: '*.${FQDN}'
      - Ref: FQDN

  # Create endpoint for our domain
  FlaskHttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref FQDN
        CertificateArn: !Ref GenerateCertificate

  AmazonBedrockExecutionRoleForAgents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/Admin"
            Action: sts:AssumeRole
      Description: A role for the agent
      Path: /service-role/
      Policies:
        - PolicyName: InvokePowerUpdaterFunctions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PowerUpdaterGetStageFunction.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PowerUpdaterGetScheduleFunction.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:*
                Resource: '*'

  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "PowerUpdater-Eskom-Loadshedding-Agent"
      AgentResourceRoleArn: !GetAtt AmazonBedrockExecutionRoleForAgents.Arn
      Description: "Agent for providing information regarding Eskom loadshedding"
      IdleSessionTTLInSeconds: 600
      Instruction: |
        You are a helpful agent that helps customers with Eskom loadshedding queries. 
        You can query Eskom systems for the loadshedding stage and schedule, and help customers understand it.
      FoundationModel: "anthropic.claude-3-sonnet-20240229-v1:0"
      ActionGroups:
        - ActionGroupName: PowerUpdater-Eskom-Loadshedding-GetStage
          Description: "Use this tool to query Eskom systems for the loadshedding stage"
          ActionGroupExecutor:
            Lambda: !GetAtt PowerUpdaterGetStageFunction.Arn
          ActionGroupState: ENABLED
          FunctionSchema:
            Functions:
              - Name: GetLoadsheddingStage
                Description: |
                  returns the load shedding stage from Eskom API
        - ActionGroupName: PowerUpdater-Eskom-Loadshedding-GetSchedule
          Description: "Use this tool to query Eskom systems for the loadshedding schedule"
          ActionGroupExecutor:
            Lambda: !GetAtt PowerUpdaterGetScheduleFunction.Arn
          ActionGroupState: ENABLED
          FunctionSchema:
            Functions:
              - Name: GetLoadsheddingSchedule
                Description: |
                  returns the load shedding schedule from Eskom API for the specified stage
                Parameters:
                  stage:
                    Description: "The current loadshedding stage"
                    Required: True
                    Type: string

  # Then create the Agent Alias
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentAliasName: !Sub PowerUpdater-Eskom-Loadshedding-Agent
      AgentId: !GetAtt Agent.AgentId
      Description: !Sub PowerUpdater-Eskom-Loadshedding-Agent

Outputs:
  FlaskFunctionApi:
    Description: API Gateway endpoint URL for FlaskFunction
    Value: !Sub "https://${FlaskHttpApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"
  TelegramWebHook:
    Description: API Gateway endpoint URL to be used in Telegram Webhook
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
